/*Sqrt-decomposition is a method, or a data structure allowing in a mode online to perform such operations, as sum calculation on a piece for  image and element updating for image.The data structure based on sqrt-decompositionWe have an array a[ 0 .. n-1 ].   We must build a structure, which can find a sum of elements a[l..r] for  image.Let's do precalculating:divide our array a into blocks of  \sqrt{n} elements and precalculate in every block sum of elements b[i] in themlength of our blocks will be \sqrt{n}So we have this precalculating blocks and we can reply for all requests (l, r). How? We will add to answer all blocks that fully located in interval (l, r). Then add to answer all elements of interval thatare not included in those blocks. Look at code.    int n,a[100001],b[100001],s;    memset(a,sizeof(a),0);    memset(b,sizeof(b),0);    cin>>n;    // precalculating    s=int(sqrt(n + .0))+1; // size of blocks and count of blocks    for (int i=0;i<n;i++)    {        cin>>a[i];        b[i/s]+=a[i];    }    // requests    while(true)    {        int l,r;        cin>>l>>r;        int ans=0;        int nl=l/s,nr=r/s; // nl - block that contain l, nr - block that contain r        if (nl==nr) {for (int i=l;i<=r;i++) ans+=a[i]; cout<<ans<<endl;continue;}        for (int i=l, j=(nl+1)*s-1; i<=j; i++) ans+=a[i];        for (int i=nl+1; i<nr; i++) ans+=b[i];        for (int i=nr*s; i<=r; i++) ans+=a[i];        cout<<ans;    }Similarly we solve the problem of finding the maximum and minimum on the interval.For solving problems often used method sqrt-decomposition of the input query.*/