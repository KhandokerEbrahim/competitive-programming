/********************************
*MAHBUBCSEJU                    *
*CSE 22                         *
*JAHANGIRNAGAR UNIVERSITY       *
*TIMUS:164273FU                 *
*UVA>>LIGHTOJ>>HUST:mahbubcseju */
#include <algorithm>
#include <cstdio>
#include <sstream>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <set>
#include <queue>
#include <stack>
#include <list>
#include <iostream>
#include <fstream>
#include <numeric>
#include <string>
#include <vector>
#include <cstring>
#include <map>
#include <iterator>
#include <deque>
#include <climits>
#include <complex>
#include <bitset>
#include <limits>
#define ll long long int
#define ull unsigned long long int
#define I(a) scanf("%d",&a)
#define I2(a,b) scanf("%d%d",&a,&b)
#define I3(a,b,c) scanf("%d%d%d",&a,&b,&c)
#define L(a) scanf("%lld",&a)
#define L2(a,b) scanf("%lld%lld",&a,&b)
#define L3(a,b,c) scanf("%lld%lld%lld",&a,&b,&c)
#define PI(a) printf("%d",a)
#define PL(a) printf("%lld",a)
#define PT(t) printf("Case %d: ",t)
#define PB push_back
#define x first
#define y second
#define xx first.first
#define xy first.second
#define yx second.first
#define yy second.second
#define SC scanf
#define PC printf
#define NL printf("\n")
#define SET(a) memset(a,0,sizeof a)
#define SETR(a) memset(a,-1,sizeof a)
#define SZ(a) ((int)a.size())-1
#define f(i,a,b) for(int i=a;i<=b; i++)
#define fr(i,a,b) for(int i=a;i<=b; i++)
#define frr(i,a,b) for(int i=a;i>=b; i--)
#define frv(i,a)  for(int i=0;i<a.size();i++)
//#define pi 2.0*acos(0.0)
#define R(a) freopen(a, "r", stdin);
#define W(a) freopen(a, "w", stdout);
#define CB(x) __builtin_popcount(x)
#define STN(a) stringtonumber<ll>(a)
#define lol printf("BUG\n")
#define Endl "\n"
#define mk make_pair
using namespace std;
template <class T> inline T BM(T p, T e, T M) {
    ll ret = 1;
    for (; e > 0; e >>= 1) {
        if (e & 1) ret = (ret * p) % M;
        p = (p * p) % M;
    }
    return (T)ret;
}
template <class T> inline T gcd(T a, T b) {
    if (b == 0)return a;
    return gcd(b, a % b);
}
template <class T> inline T mdINV(T a, T M) {
    return BM(a, M - 2, M);
}
template <class T> inline T PW(T p, T e) {
    ll ret = 1;
    for (; e > 0; e >>= 1) {
        if (e & 1) ret = (ret * p);
        p = (p * p);
    }
    return (T)ret;
}
template <class T>string NTS ( T Number ) {
    stringstream ss;
    ss << Number;
    return ss.str();
}
template <class T>T stringtonumber ( const string &Text ) {
    istringstream ss(Text);
    T result;
    return ss >> result ? result : 0;
}
template <class T>bool ISLEFT ( T a, T b, T c) {
    if (((a.xx - b.xx) * (b.yy - c.yy) - (b.xx - c.xx) * (a.yy - b.yy)) < 0.0)return 1; //Uporer dike //A,b,c, x okkher ordera sorted
    else return 0;
}


typedef pair<int , int > P;
typedef vector<int> V;
//////////////////////////
/////////////////////////
#define maxv  40000+7
double PI = acos(-1.);
struct FFT {


    void cal_max_value(int n) {
        cout << ( 1<<( 32 - __builtin_clz( 2*n ) ) ) << endl;
    }

    struct COMPLEX {
        double r; /* real */
        double i; /* imaginary */
    };

    COMPLEX temp[maxv];
    COMPLEX a[maxv],b[maxv];
    unsigned int table[maxv];

    int p;

    int res[maxv];

    void init(int n,int m) {
        n = max(n,m);
        p = ( 1<<(32-__builtin_clz(n)) );
    }

    void Clear() {
        for(int i=0; i<=p; i++) {
            a[i].r  = a[i].i = b[i].i = b[i].r = 0;
            res[i] = 0;
        }
    }

    void iterative_fft(COMPLEX* A,  int n, int logn, int inv) {
        int i,k,j,s,m;
        double lalit;
        COMPLEX w, wn, twiddle, u;
        for(i=0; i<n; i++) temp[i]=A[table[i]];
        for(s=1; s<=logn; s++) {
            m=1<<s;
            if(inv) {
                wn.r = cos(-2*PI/(double)m);
                wn.i = sin(-2*PI/(double)m);
            } else {
                wn.r = cos(2*PI/(double)m);
                wn.i = sin(2*PI/(double)m);
            }
            for(k=0; k<n; k+=m) {
                w.r = 1.000000;
                w.i = 0.000000;
                for(j=0; j<m/2; j++) {
                    twiddle.r  = w.r*temp[k+j+m/2].r - w.i*temp[k+j+m/2].i;
                    twiddle.i  = w.i*temp[k+j+m/2].r + w.r*temp[k+j+m/2].i;
                    u = temp[k+j];
                    temp[k+j].r=u.r+ twiddle.r;
                    temp[k+j].i=u.i+ twiddle.i;
                    temp[k+j+ m/2].r=u.r- twiddle.r;
                    temp[k+j+ m/2].i= u.i- twiddle.i;
                    lalit=w.r;
                    w.r = w.r*wn.r - w.i*wn.i;
                    w.i = w.i*wn.r + lalit*wn.i;
                }
            }
        }
        for(i=0; i<n; i++) A[i]=temp[i];
        return;
    }

    void poly_mul() {

        int n = p;

        int tempi=n,logn=0;
        double lalit;
        while(tempi!=0) tempi>>=1,logn++;
        logn--;
        const int bitSize = logn;
        unsigned int i,v,r,s;
        for(i = 0; i < 1 << bitSize; i++) {
            v = i;
            r = 0;
            s = bitSize;
            while(s--) {
                r <<= 1;
                r |= v & 1;
                v >>= 1;
            }
            table[i]=r;
        }
        int j;
        iterative_fft(a, n,logn, 0);
        iterative_fft(b, n,logn, 0);
        for(j = 0; j < n; j++) {
            lalit=a[j].r;
            a[j].r = a[j].r*b[j].r - a[j].i*b[j].i;
            a[j].i = a[j].i*b[j].r + lalit*b[j].i;
        }
        iterative_fft(a, n, logn, 1);
        for(j = 0; j < (n); j++)
            a[j].r = a[j].r/n;

        // edited part :::

        for(int i=0; i<p; i++) {
            res[i] = ( a[i].r + 0.5 );
        }
    }

} DFT;




int main() {

    DFT.cal_max_value(10000);//call with the max size of an a or b
    int tc;
    I(tc);
    while(tc--) {
        DFT.init(20000,20000);// max size of ans array
        DFT.Clear();
        char a1[10000+2];
        SC("%s",a1+1);
        int l=strlen(a1+1);
        for(int i=l; i>=1; i--) {
            int x=a1[i]-'0';
            DFT.a[l-i+1].r=x;
        }
        SC("%s",a1+1);
        int l1=strlen(a1+1);
        for(int i=l1; i>=1; i--) {
            int x=a1[i]-'0';
            DFT.b[l1-i+1].r=x;

        }
        DFT.poly_mul();
        vector<int>ans;
        int co=0;
        for(int j=2; j<=l+l1; j++) {
            co+=DFT.res[j];
            ans.PB(co%10);
            co/=10;
        }
        if(co)ans.PB(co);
        bool fl=0;
        for(int i=-1+(int)ans.size(); i>=0; i--) {
            if(ans[i]==0&&fl==0)continue;
            fl=1;
            PI(ans[i]);
        }
        if(!fl)PI(0);
        NL;
    }


    return 0;
}
