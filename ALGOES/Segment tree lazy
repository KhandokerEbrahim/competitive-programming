#include<bits/stdc++.h>
using namespace std;
#define MX 50002ll
#define md 1000000007
#define maxp 2050180000
#define LO(X) X[p][k]
#define base 29
#define mk make_pair
#define x first
#define y second

typedef pair<int , int > P;
typedef vector<int> V;
//////////////////////////
/////////////////////////

vector<int> adj[MX];
int chainNo,ptr;
int T[MX],L[MX];
int subTree[MX];
int Start[MX],chainID[MX];//Needs to clear
int pos[MX];
int cvr[MX][2];
inline void Dfs(int u,int p,int l) {
    T[u] = p;
    L[u] = l;
    subTree[u] = 1;
    for (int i=0; i<adj[u].size(); i++) {
        int v= adj[u][i];

        if (v == p)     continue;

        Dfs(v,u,l+1);
        subTree[u] += subTree[v];
    }
}
inline void HLD(int u,int p) {
    if (Start[chainNo] == 0)
        Start[chainNo] = u;
    chainID[u] = chainNo;
    pos[u] = ++ptr;
    cvr[u][0] = ptr;
    int sc = -1, mx = -1;
    int sis=adj[u].size();
    for (int i=0; i<sis; i++) {
        int v = adj[u][i];

        if ( v!= p && subTree[v] > mx) {
            sc = i;
            mx = subTree[v];
        }
    }
    if (sc != -1 )      HLD(adj[u][sc],u);
    for (int i=0; i<sis; i++) {
        if (i == sc)        continue;
        int v= adj[u][i];
        if (v!=p) {
            chainNo++;
            HLD(v,u);
        }
    }

    cvr[u][1] = ptr;
}
int n;

inline int lca(int x,int y) {

    while(chainID[x]!=chainID[y]) {
        if(L[Start[chainID[x]]]>L[Start[chainID[y]]]) {
            x=T[Start[chainID[x]]];
        } else y=T[Start[chainID[y]]];
    }
    return L[x]<L[y]?x:y;
}

struct nd {
    int fi,la;
    int difgcd;
} tree[MX*4];
int lazy[MX*4];

int val[MX+2];

inline void build(int node,int ss,int se) {
    if(ss == se) {
        tree[node].fi = tree[node].la = val[ss];
        tree[node].difgcd = 0;
        return;
    }
    int p = (node<<1);
    int q = p|1;
    int mid = (ss+se)>>1;
    build(p,ss,mid);
    build(q,mid+1,se);
    tree[node].fi = tree[p].fi;
    tree[node].la = tree[q].la;
    tree[node].difgcd = __gcd(__gcd(abs(tree[q].fi-tree[p].la),tree[p].difgcd),tree[q].difgcd);

}
inline void relax(int node,int ss,int se) {
    int k = lazy[node];
    if(k) {
        tree[node].fi += lazy[node];
        tree[node].la += lazy[node];
        if(ss^se) {
            lazy[node*2] += lazy[node];
            lazy[node*2+1] += lazy[node];
        }
        lazy[node] = 0;
    }
}
inline void update(int node,int ss,int se,int qs,int qe,int d) {
    relax(node,ss,se);

    if(ss > qe || se < qs || ss > se || qs > qe) return;

    if(ss >= qs && se <= qe) {
        lazy[node] += d;
        relax(node,ss,se);
        return;
    }
    int p = (node<<1);
    int q = p|1;
    int mid = (ss+se)>>1;
    update(p,ss,mid,qs,qe,d);
    update(q,mid+1,se,qs,qe,d);
    tree[node].fi = tree[p].fi;
    tree[node].la = tree[q].la;
    tree[node].difgcd = __gcd(__gcd(abs(tree[q].fi-tree[p].la),tree[p].difgcd),tree[q].difgcd);
}


inline int query(int node,int ss,int se,int qs,int qe) {
    if(ss > qe || se < qs || ss > se || qs > qe) return 0;
    relax(node,ss,se);
    if(ss >= qs && se <= qe) {
        return __gcd(tree[node].fi,tree[node].difgcd);
    }
    int p = (node<<1);
    int q = p|1;
    int mid = (ss+se)>>1;
    int pp = query(p,ss,mid,qs,qe);
    int qq = query(q,mid+1,se,qs,qe);
    return __gcd(pp,qq);
}
P ar[MX+2];

inline void updateup(int x,int y,int upval) {
    int sz=0;
    while(1) {
        if(chainID[x]==chainID[y])break;
        int x1=Start[chainID[x]];
        ar[++sz]=mk(pos[x1],pos[x]);
        x=T[x1];
    }
    if(pos[y]!=pos[x])
        ar[++sz]=mk(pos[y]+1,pos[x]);
    for(int i=1; i<=sz; i++)update(1,1,n,ar[i].x,ar[i].y,upval);
}


inline int  queryup(int x,int y) {
    int sz=0;
    while(1) {
        if(chainID[x]==chainID[y])break;
        int x1=Start[chainID[x]];
        ar[++sz]=mk(pos[x1],pos[x]);
        x=T[x1];
    }

    ar[++sz]=mk(pos[y],pos[x]);
    int ans=0;
    for(int i=1; i<=sz; i++)ans=__gcd(ans,query(1,1,n,ar[i].x,ar[i].y));
    return ans;
}

int main() {

    cin>>n;
    for(int i=1; i<n; i++) {
        int u,v,c;
        I2(u,v);
        u++;
        v++;
        adj[u].PB(v);
        adj[v].PB(u);
    }


    chainNo=1;
    ptr=0;
    Dfs(1,-1,1);
    HLD(1,-1);
    for(int i=1; i<=n; i++)I(val[pos[i]]);
    build(1,1,n);
    int q;
    I(q);
    while(q--) {
        char ch[2];
        int x,y,c;
        SC("%s",ch);
        if(ch[0]=='C') {
            I3(x,y,c);
            x++;
            y++;
            int lc=lca(x,y);
            updateup(x,lc,c);
            updateup(y,lc,c);
            update(1,1,n,pos[lc],pos[lc],c);
        } else {
            int x,y;
            I2(x,y);
            x++,y++;
            int lc=lca(x,y);
            int gc=queryup(x,lc);
            gc=__gcd(gc,queryup(y,lc));
            PI(gc);
            NL;

        }
    }

    return 0;
}
